import 'reflect-metadata';
/**
 * Declares a class property to be a DTO property, which makes
 * it available for autogenerated builder classes.

 * @returns a PropertyDecorator wrapping the class property.
 */
export function Property(target: Object, propertyKey: string | symbol) {
  // define metadata with value "First"
  Reflect.defineMetadata(
    `dto:annotations:property`,
    'frog',
    target,
    propertyKey
  );

  const variables =
    Reflect.getOwnMetadata(target.constructor.name, target.constructor) ?? [];
  if (!variables.includes(propertyKey)) {
    variables.push(propertyKey);
  }
  Reflect.defineMetadata(
    target.constructor.name,
    variables,
    target.constructor
  );
}

export function getDtoPropertyDecorators(target: Object): string[] {
  // get info about keys that used in current property
  return Reflect.getOwnMetadata(target.constructor.name, target.constructor)
}
