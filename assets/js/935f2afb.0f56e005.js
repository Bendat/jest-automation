"use strict";(self.webpackChunkjest_automation=self.webpackChunkjest_automation||[]).push([[53],{1469:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Cucumber","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Intro","href":"/jest-automation/docs/cucumber/intro","docId":"cucumber/intro"},{"type":"link","label":"Automatic Scenarios","href":"/jest-automation/docs/cucumber/all-steps","docId":"cucumber/all-steps"},{"type":"link","label":"Reusing Steps","href":"/jest-automation/docs/cucumber/shared-steps","docId":"cucumber/shared-steps"},{"type":"link","label":"Variables, Regex and Expressions","href":"/jest-automation/docs/cucumber/variables","docId":"cucumber/variables"},{"type":"link","label":"Asynchronous Step Definitions","href":"/jest-automation/docs/cucumber/async","docId":"cucumber/async"},{"type":"link","label":"Tags & Filtering Tests","href":"/jest-automation/docs/cucumber/filtering","docId":"cucumber/filtering"},{"type":"link","label":"Configuration","href":"/jest-automation/docs/cucumber/config","docId":"cucumber/config"},{"type":"category","label":"Configuration","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Setup & Configuration","href":"/jest-automation/docs/cucumber/Configuration/setup","docId":"cucumber/Configuration/setup"},{"type":"link","label":"Flags","href":"/jest-automation/docs/cucumber/Configuration/flags","docId":"cucumber/Configuration/flags"}]}]},{"type":"category","label":"Utilities","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"DTO & Builder Pattern","href":"/jest-automation/docs/utilities/dto-builder","docId":"utilities/dto-builder"}]},{"type":"link","label":"Intro","href":"/jest-automation/docs/intro","docId":"intro"}]},"docs":{"cucumber/all-steps":{"id":"cucumber/all-steps","title":"Automatic Scenarios","description":"It is possible to avoid writing individual scenarios and outlines for a feature file by using the All function provided by Feature","sidebar":"tutorialSidebar"},"cucumber/async":{"id":"cucumber/async","title":"Asynchronous Step Definitions","description":"The callbacks for Feature, Scenario, Background etc do not allow for async functions so this should be avoided:","sidebar":"tutorialSidebar"},"cucumber/config":{"id":"cucumber/config","title":"Configuration","description":"","sidebar":"tutorialSidebar"},"cucumber/Configuration/flags":{"id":"cucumber/Configuration/flags","title":"Flags","description":"Flags are toggles which can be method chained.","sidebar":"tutorialSidebar"},"cucumber/Configuration/setup":{"id":"cucumber/Configuration/setup","title":"Setup & Configuration","description":"To start configuring jest-automation, create a file near the root of your project called jest-automation.setup.ts and add it to jest.config.[j|t]s as a setup file.","sidebar":"tutorialSidebar"},"cucumber/filtering":{"id":"cucumber/filtering","title":"Tags & Filtering Tests","description":"In cucumber it\'s possible to tag your tests to categorize them. These tags can be used to filter scenarios which can or cannot run.","sidebar":"tutorialSidebar"},"cucumber/intro":{"id":"cucumber/intro","title":"Intro","description":"Jest-Automation is a runner for Cucumber which runs on Jest.","sidebar":"tutorialSidebar"},"cucumber/shared-steps":{"id":"cucumber/shared-steps","title":"Reusing Steps","description":"It\'s possible to create Steps for reuse. To do so,","sidebar":"tutorialSidebar"},"cucumber/variables":{"id":"cucumber/variables","title":"Variables, Regex and Expressions","description":"Variables can be extracted from a Gherkin step using either","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Intro","description":"@jest-automation is a collection of libraries which one may find useful for automation testing on NodeJS.","sidebar":"tutorialSidebar"},"utilities/dto-builder":{"id":"utilities/dto-builder","title":"DTO & Builder Pattern","description":"This is a simple library for defining DTO (data transfer object) classes with decorators, and automatically generating builder classes","sidebar":"tutorialSidebar"}}}')}}]);